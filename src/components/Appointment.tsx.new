import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/lib/AuthContext";
import UserAppointments from "./UserAppointments";
import RequireAuth from "./RequireAuth";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import { checkAppointmentAvailability, createAppointment } from "@/lib/firestore";
import { AppointmentCalendarNew } from "./AppointmentCalendarNew";

const Appointment = () => {
  const [appointmentData, setAppointmentData] = useState({
    name: "",
    email: "",
    phone: "",
    date: "",
    time: "",
    service: "",
    participants: "1",
    notes: ""
  });
  const [loading, setLoading] = useState(false);
  const [checkingAvailability, setCheckingAvailability] = useState(false);
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);
  const [showCalendar, setShowCalendar] = useState(false);
  
  const { toast } = useToast();
  const { currentUser, userData } = useAuth();

  // Pre-llenar el formulario con los datos del usuario si está autenticado
  useEffect(() => {
    if (currentUser && userData) {
      setAppointmentData(prev => ({
        ...prev,
        name: userData.name || "",
        email: currentUser.email || "",
        phone: userData.phone || ""
      }));
    }
  }, [currentUser, userData]);
  
  // Verificar si hay datos preseleccionados de fecha y hora en sessionStorage
  useEffect(() => {
    const selectedDate = sessionStorage.getItem('selectedDate');
    const selectedTime = sessionStorage.getItem('selectedTime');
    
    if (selectedDate) {
      setAppointmentData(prev => ({
        ...prev,
        date: selectedDate
      }));
      sessionStorage.removeItem('selectedDate');
      
      // Resaltar el campo de fecha
      setTimeout(() => {
        const dateInput = document.getElementById('appointment-date');
        if (dateInput) {
          dateInput.classList.add('border-primary', 'ring', 'ring-primary/20');
          setTimeout(() => {
            dateInput.classList.remove('border-primary', 'ring', 'ring-primary/20');
          }, 2000);
        }
      }, 500);
    }
    
    if (selectedTime) {
      setAppointmentData(prev => ({
        ...prev,
        time: selectedTime
      }));
      sessionStorage.removeItem('selectedTime');
      
      // Resaltar el campo de hora
      setTimeout(() => {
        const timeSelect = document.querySelector('[name="time"]');
        if (timeSelect) {
          const parent = timeSelect.closest('.flex-1');
          if (parent) {
            parent.classList.add('border-primary', 'ring', 'ring-primary/20');
            setTimeout(() => {
              parent.classList.remove('border-primary', 'ring', 'ring-primary/20');
            }, 2000);
          }
        }
      }, 800);
      
      // Si tenemos fecha y hora preseleccionadas, verificar disponibilidad
      if (selectedDate && selectedTime) {
        verifyAvailability(selectedDate, selectedTime);
      }
    }
  }, []);
  
  const verifyAvailability = async (date: string, time: string) => {
    try {
      setCheckingAvailability(true);
      const { available } = await checkAppointmentAvailability(date, time);
      
      if (!available) {
        toast({
          title: "Horario no disponible",
          description: "Lo sentimos, este horario ya no está disponible. Por favor, selecciona otro.",
          variant: "destructive"
        });
        setAppointmentData(prev => ({ ...prev, time: "" }));
      } else {
        toast({
          title: "Horario disponible",
          description: "¡Excelente elección! Este horario está disponible.",
          variant: "default"
        });
      }
    } catch (error) {
      console.error("Error verificando disponibilidad:", error);
      toast({
        title: "Error",
        description: "Hubo un error al verificar la disponibilidad. Inténtalo de nuevo.",
        variant: "destructive"
      });
    } finally {
      setCheckingAvailability(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setAppointmentData(prev => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (name: string, value: string) => {
    setAppointmentData(prev => ({ ...prev, [name]: value }));
    
    // Si se cambia la fecha o la hora, verificar disponibilidad
    if ((name === "date" && appointmentData.time) || (name === "time" && appointmentData.date)) {
      verifyAvailability(
        name === "date" ? value : appointmentData.date,
        name === "time" ? value : appointmentData.time
      );
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validación básica
    if (!appointmentData.name || !appointmentData.email || !appointmentData.date || 
        !appointmentData.time || !appointmentData.service || !appointmentData.participants) {
      toast({
        title: "Campos incompletos",
        description: "Por favor, completa todos los campos obligatorios.",
        variant: "destructive"
      });
      return;
    }
    
    try {
      setLoading(true);
      
      // Verificar disponibilidad antes de enviar
      const { available } = await checkAppointmentAvailability(
        appointmentData.date,
        appointmentData.time
      );
      
      if (!available) {
        toast({
          title: "Horario no disponible",
          description: "Lo sentimos, este horario ya no está disponible. Por favor, selecciona otro.",
          variant: "destructive"
        });
        return;
      }
      
      // Crear la cita
      await createAppointment({
        ...appointmentData,
        userId: currentUser?.uid || null,
        status: 'pending',
        createdAt: new Date()
      });
      
      toast({
        title: "¡Reserva exitosa!",
        description: "Tu cita ha sido programada. Te enviaremos un correo de confirmación.",
        variant: "default"
      });
      
      // Limpiar el formulario
      setAppointmentData({
        name: userData?.name || "",
        email: currentUser?.email || "",
        phone: userData?.phone || "",
        date: "",
        time: "",
        service: "",
        participants: "1",
        notes: ""
      });
      
    } catch (error) {
      console.error("Error al crear la cita:", error);
      toast({
        title: "Error",
        description: "Hubo un problema al procesar tu reserva. Inténtalo de nuevo.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };
  
  const handleShowCalendar = () => {
    setShowCalendar(true);
  };
  
  const handleCalendarDateTimeSelect = (date?: Date, timeSlot?: string) => {
    if (date) {
      const formattedDate = format(date, "yyyy-MM-dd");
      setAppointmentData(prev => ({
        ...prev,
        date: formattedDate
      }));
      
      if (timeSlot) {
        setAppointmentData(prev => ({
          ...prev,
          time: timeSlot
        }));
        
        // Verificar disponibilidad
        verifyAvailability(formattedDate, timeSlot);
      }
    }
  };
  
  const handleViewAppointmentForm = () => {
    setShowCalendar(false);
  };

  return (
    <section id="agenda" className="py-20 bg-accent">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="font-primary text-4xl md:text-5xl font-bold text-primary mb-6">
            ¿Listo para descubrir tu esencia?
          </h2>
          <p className="font-secondary text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto">
            Reserva tu cata personalizada y vive una experiencia olfativa inolvidable
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-8">
          {/* Formulario de Reserva */}
          <Card className="bg-background shadow-lg">
            <CardHeader>
              <CardTitle className="font-primary text-2xl">Reserva tu Cita</CardTitle>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="name">Nombre completo *</Label>
                    <Input 
                      id="name" 
                      name="name" 
                      value={appointmentData.name} 
                      onChange={handleInputChange}
                      placeholder="Tu nombre completo" 
                      required 
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="email">Correo electrónico *</Label>
                    <Input 
                      id="email" 
                      name="email" 
                      type="email" 
                      value={appointmentData.email} 
                      onChange={handleInputChange}
                      placeholder="tu@email.com" 
                      required 
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="phone">Teléfono *</Label>
                    <Input 
                      id="phone" 
                      name="phone" 
                      type="tel" 
                      value={appointmentData.phone} 
                      onChange={handleInputChange}
                      placeholder="+34 600 000 000" 
                      required 
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="service">Tipo de Cata *</Label>
                    <Select 
                      name="service" 
                      value={appointmentData.service} 
                      onValueChange={(value) => handleSelectChange("service", value)}
                      required
                    >
                      <SelectTrigger id="service">
                        <SelectValue placeholder="Selecciona un tipo de cata" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="individual">Cata Íntima (45 min)</SelectItem>
                        <SelectItem value="pareja">Cata de Pareja (60 min)</SelectItem>
                        <SelectItem value="grupo">Cata Grupal (90 min)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2 md:col-span-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="date">Fecha de la cita *</Label>
                      <Button 
                        type="button" 
                        variant="ghost" 
                        size="sm" 
                        onClick={handleShowCalendar}
                        className="text-xs"
                      >
                        Ver disponibilidad
                      </Button>
                    </div>
                    <Input 
                      id="appointment-date" 
                      name="date" 
                      type="date" 
                      value={appointmentData.date} 
                      onChange={handleInputChange}
                      required 
                      min={format(new Date(), 'yyyy-MM-dd')}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="time">Hora *</Label>
                    <Select 
                      name="time" 
                      value={appointmentData.time} 
                      onValueChange={(value) => handleSelectChange("time", value)}
                      required
                    >
                      <SelectTrigger id="time">
                        <SelectValue placeholder="Selecciona una hora" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="10:00">10:00</SelectItem>
                        <SelectItem value="11:00">11:00</SelectItem>
                        <SelectItem value="12:00">12:00</SelectItem>
                        <SelectItem value="14:00">14:00</SelectItem>
                        <SelectItem value="15:00">15:00</SelectItem>
                        <SelectItem value="16:00">16:00</SelectItem>
                        <SelectItem value="17:00">17:00</SelectItem>
                        <SelectItem value="18:00">18:00</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="participants">Número de personas *</Label>
                    <Select 
                      name="participants" 
                      value={appointmentData.participants} 
                      onValueChange={(value) => handleSelectChange("participants", value)}
                      required
                    >
                      <SelectTrigger id="participants">
                        <SelectValue placeholder="Selecciona cantidad" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">1 persona</SelectItem>
                        <SelectItem value="2">2 personas</SelectItem>
                        <SelectItem value="3">3 personas</SelectItem>
                        <SelectItem value="4">4 personas</SelectItem>
                        <SelectItem value="5">5 personas</SelectItem>
                        <SelectItem value="6">6 personas</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid grid-cols-1 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="notes">Notas adicionales</Label>
                    <Textarea 
                      id="notes" 
                      name="notes" 
                      value={appointmentData.notes} 
                      onChange={handleInputChange}
                      placeholder="Preferencias, alergias, consultas..." 
                      rows={4}
                    />
                  </div>
                </div>

                <Button 
                  type="submit" 
                  className="w-full font-secondary"
                  disabled={loading || checkingAvailability}
                >
                  {loading ? "Procesando..." : "Reservar Ahora"}
                </Button>
              </form>
            </CardContent>
          </Card>

          {/* Panel de Citas del Usuario */}
          <RequireAuth fallback={
            <Card className="bg-background shadow-lg h-full flex flex-col">
              <CardHeader>
                <CardTitle className="font-primary text-2xl">Mis Reservas</CardTitle>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col items-center justify-center text-center">
                <p className="text-muted-foreground mb-4">
                  Inicia sesión para ver y administrar tus reservas de catas
                </p>
                <Button 
                  variant="outline" 
                  className="font-secondary" 
                  onClick={() => window.document.getElementById('auth-trigger')?.click()}
                >
                  Iniciar Sesión
                </Button>
              </CardContent>
            </Card>
          }>
            <UserAppointments />
          </RequireAuth>
        </div>
      </div>
      
      {/* Modal de Calendario de Disponibilidad */}
      {showCalendar && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-background rounded-lg max-w-3xl w-full max-h-[90vh] overflow-auto">
            <div className="flex justify-between items-center p-4 border-b">
              <h3 className="font-primary text-xl font-semibold">Disponibilidad de Citas</h3>
              <Button variant="ghost" size="icon" onClick={() => setShowCalendar(false)}>
                <X className="w-4 h-4" />
              </Button>
            </div>
            <div className="p-4">
              <AppointmentCalendarNew 
                onSelectDateTime={handleCalendarDateTimeSelect}
                onViewAppointmentForm={handleViewAppointmentForm}
              />
            </div>
          </div>
        </div>
      )}
    </section>
  );
};

export default Appointment;
