import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import AnimatedLogo from './AnimatedLogo';

interface LoadingScreenProps {
  onLoadingComplete: () => void;
}

const LoadingScreen: React.FC<LoadingScreenProps> = ({ onLoadingComplete }) => {
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [textIndex, setTextIndex] = useState(0);
  const [showFinalText, setShowFinalText] = useState(false);
  
  // Textos relacionados con perfumes y esencias
  const loadingTexts = useMemo(() => [
    "Destilando notas de ámbar...",
    "Capturando esencias florales...",
    "Mezclando fragancias exclusivas...",
    "Evocando sensaciones únicas...",
    "Perfeccionando cada acorde..."
  ], []);
  
  const finalText = "NUVÓ Essence Ritual";

  // Función optimizada para la animación de carga
  const handleLoading = useCallback(() => {
    const startTime = Date.now();
    const minDisplayTime = 2000; // Reducido a 2 segundos para mayor fluidez
    
    // Usar requestAnimationFrame para mejor rendimiento en animaciones
    let animationId: number;
    let lastTimestamp = 0;
    const targetFPS = 60;
    const frameInterval = 1000 / targetFPS;
    
    const animate = (timestamp: number) => {
      if (!lastTimestamp || timestamp - lastTimestamp >= frameInterval) {
        lastTimestamp = timestamp;
        
        setLoadingProgress((prev) => {
          // Curva de aceleración más natural
          const incrementFactor = prev < 30 ? 2 : (prev < 70 ? 4 : 8);
          const newProgress = prev + (Math.random() * incrementFactor * 0.7);
          
          if (newProgress >= 100) {
            cancelAnimationFrame(animationId);
            setShowFinalText(true);
            
            const elapsedTime = Date.now() - startTime;
            const remainingTime = Math.max(0, minDisplayTime - elapsedTime);
            
            setTimeout(() => {
              onLoadingComplete();
            }, remainingTime + 800); // Reducido a 800ms para una transición más rápida
            
            return 100;
          }
          
          return newProgress;
        });
      }
      
      animationId = requestAnimationFrame(animate);
    };
    
    animationId = requestAnimationFrame(animate);
    
    // Cambiar el texto cada 1.2 segundos (más rápido para mayor dinamismo)
    const textInterval = setInterval(() => {
      setTextIndex((prev) => (prev + 1) % loadingTexts.length);
    }, 1200);
    
    return () => {
      cancelAnimationFrame(animationId);
      clearInterval(textInterval);
    };
  }, [onLoadingComplete, loadingTexts.length]);

  // Iniciar la animación cuando el componente se monta
  useEffect(() => {
    // Precargar la imagen del logo para reducir el parpadeo
    const logoImage = new Image();
    logoImage.src = '/logocarga.png';
    
    document.body.classList.add('loading-active');
    // Aplicar la función optimizada de carga
    const cleanup = handleLoading();
    
    return () => {
      document.body.classList.remove('loading-active');
      cleanup();
    };
  }, [handleLoading]);

  // Renderizamos las partículas de perfume memoizadas para evitar recálculos
  const perfumeParticles = useMemo(() => {
    return Array.from({ length: 12 }).map((_, index) => {
      const size = Math.random() * 4 + 2;
      const duration = Math.random() * 2 + 2;
      const delay = Math.random() * 2;
      const startPosition = Math.random() * 100;
      
      return (
        <motion.div
          key={`perfume-particle-${index}`}
          className="absolute rounded-full pointer-events-none"
          style={{
            width: size,
            height: size,
            bottom: "-5%",
            left: `${startPosition}%`,
            filter: "blur(1px)",
            background: index % 2 === 0 ? 
              "rgba(194, 163, 131, 0.4)" : 
              "rgba(226, 209, 187, 0.3)"
          }}
          animate={{
            y: [0, `-${70 + Math.random() * 30}vh`],
            x: [0, -15 + Math.random() * 30],
            opacity: [0, 0.8, 0],
            scale: [0, 1, 0.5],
          }}
          transition={{
            duration: duration,
            repeat: Infinity,
            delay: delay,
            ease: "easeOut",
          }}
        />
      );
    });
  }, []);

  return (
    <motion.div
      initial={{ opacity: 1 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0, transition: { duration: 0.6, ease: "easeInOut" } }}
      className="fixed inset-0 z-[9999] flex flex-col items-center justify-center overflow-hidden"
      data-loading-screen="true"
    >
      {/* Fondo mejorado con aspecto elegante para perfumes */}
      <div className="absolute inset-0 bg-gradient-to-b from-[#1a1a1a] via-[#20181A] to-[#1a1a1a]" />
      
      {/* Efecto de niebla/vapor de perfume */}
      <div className="absolute inset-0 opacity-30" style={{
        background: "radial-gradient(circle at 50% 50%, rgba(194, 163, 131, 0.15), rgba(0, 0, 0, 0) 70%)"
      }} />
      
      {/* Partículas que simulan gotas de perfume flotantes - memoizadas */}
      {perfumeParticles}

      <div className="relative z-10 w-full max-w-md px-4 flex flex-col items-center">
        {/* Logo animado con efectos optimizados */}
        <motion.div 
          className="mb-12"
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ 
            type: "spring", 
            stiffness: 100, 
            delay: 0.2 
          }}
        >
          <AnimatedLogo />
        </motion.div>

        {/* Texto de carga con cambio suave */}
        <motion.div
          className="text-center mb-8 h-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <AnimatePresence mode="wait">
            {showFinalText ? (
              <motion.p
                key="final"
                className="font-primary text-2xl text-primary font-semibold"
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.5 }}
              >
                {finalText}
              </motion.p>
            ) : (
              <motion.p
                key={textIndex}
                className="font-primary text-lg text-white/90"
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.3 }}
              >
                {loadingTexts[textIndex]}
              </motion.p>
            )}
          </AnimatePresence>
        </motion.div>
        
        {/* Barra de progreso estilizada mejorada */}
        <motion.div
          className="relative w-full max-w-xs"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
        >
          {/* Línea base */}
          <motion.div
            className="w-full bg-white/10 h-1 rounded-full overflow-hidden"
            initial={{ width: "0%" }}
            animate={{ width: "100%" }}
            transition={{ delay: 0.7, duration: 0.5 }}
          >
            {/* Barra de progreso con brillo de perfume */}
            <motion.div
              className="relative h-full bg-gradient-to-r from-primary/70 via-primary to-primary/70 rounded-full"
              style={{ width: `${loadingProgress}%` }}
            >
              {/* Efecto de brillo que se mueve más rápido */}
              <motion.div
                className="absolute inset-0 bg-gradient-to-r from-transparent via-white/50 to-transparent"
                animate={{
                  left: ["-100%", "200%"],
                }}
                transition={{
                  repeat: Infinity,
                  duration: 1.5, // Más rápido para mayor fluidez
                  ease: "linear",
                }}
                style={{ width: "50%" }}
              />
            </motion.div>
          </motion.div>
          
          {/* Porcentaje */}
          <motion.p
            className="absolute -right-8 -top-6 text-xs font-medium text-primary/80"
            initial={{ opacity: 0 }}
            animate={{ opacity: loadingProgress > 5 ? 1 : 0 }}
          >
            {Math.round(loadingProgress)}%
          </motion.p>
        </motion.div>
        
        {/* Efecto de anillos concéntricos - reducidos para mejor rendimiento */}
        <div className="absolute inset-0 pointer-events-none flex items-center justify-center">
          {Array.from({ length: 2 }).map((_, i) => (
            <motion.div
              key={`ring-${i}`}
              className="absolute rounded-full border border-primary/20"
              style={{
                width: `${320 + i * 120}px`,
                height: `${320 + i * 120}px`,
              }}
              animate={{
                scale: [1, 1.08, 1],
                opacity: [0.1, 0.3, 0.1],
              }}
              transition={{
                duration: 2.5 + i,
                repeat: Infinity,
                delay: i * 0.3,
                ease: "easeInOut",
              }}
            />
          ))}
        </div>
      </div>
    </motion.div>
  );
};

export default LoadingScreen;
